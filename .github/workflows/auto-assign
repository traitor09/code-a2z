name: Auto-Assign via Issue Body

on:
  issues:
    types: [opened, edited, reopened]

jobs:
  auto-assign:
    runs-on: ubuntu-latest

    steps:
      - name: Auto-assign from issue body
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const body = issue.body || "";
            const user = issue.user.login;
            const userId = issue.user.id;

            const exactYesMatch = body.includes("### Would you like to work on this issue?\n\nYes");
            const alreadyAssigned = issue.assignees.some(a => a.login === user);

            // Proceed only if "Yes" block is present and issue has no assignees
            if (exactYesMatch && issue.assignees.length === 0) {

              // Step 1: Check if user has been previously assigned to this issue
              const { data: events } = await github.rest.issues.listEventsForTimeline({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                per_page: 100
              });

              const userAssignedBefore = events.some(e => 
                e.event === "assigned" && 
                e.assignee && 
                e.assignee.id === userId
              );

              if (userAssignedBefore) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: ` You were already assigned to this issue earlier. Re-assignment is not allowed.`
                });
                return;
              }

              // Step 2: Check how many open issues the user is assigned to
              const { data: assignedIssues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                assignee: user,
                state: "open"
              });

              if (assignedIssues.length >= 2) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: ` You already have 2 assigned issues. Please complete one before taking more.`
                });
                return;
              }

              //  Step 3: Check if label "status: assigned" is already present
              const hasAssignedLabel = issue.labels.some(l => l.name === "status: assigned");
              if (hasAssignedLabel) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: ` This issue already has an "assigned" label. Please check with maintainers.`
                });
                return;
              }

              //  Step 4: Assign the user
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                assignees: [user]
              });

              // Add label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ["status: assigned"]
              });

              //  Step 5: Parse priority for deadline
              const priorityMatch = body.match(/### Priority\s*\n\nUp to (\d+)\s*days?/i);
              let durationDays = 2; // default
              if (priorityMatch) {
                durationDays = parseInt(priorityMatch[1]);
              }

              const now = new Date();
              now.setUTCDate(now.getUTCDate() + durationDays);
              const deadlineUTC = now.toISOString().replace(/\.\d+Z$/, "Z");

              //  Step 6: Post success comment with deadline
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `âœ… Assigned to @${user}\nðŸ•’ Deadline to complete: **${deadlineUTC} UTC**`
              });
            }
