name: Deadline Check

on:
  schedule:
    - cron: '0 */6 * * *'

permissions:
  issues: write

jobs:
  check-deadlines:
    runs-on: ubuntu-latest
    steps:
      - name: Scan issues and unassign on expiry
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['Status: Assigned']
            });

            const now = new Date();

            for (const issue of issues) {
              const body = issue.body || "";
              const match = body.match(/### Priority\s+([\s\S]*?)\n/);
              const priority = match?.[1]?.toLowerCase().trim();

              const deadlineMap = {
                'up to 2 days': 2,
                'up to 3 days': 3,
                'up to 6 days': 6,
                'up to 8 days': 8,
              };

              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number
              });

              const timestampComment = comments.data.find(c => c.body?.includes('<!-- assigned-timestamp -->'));
              if (!timestampComment) continue;

              const dateMatch = timestampComment.body.match(/\[Assigned on\] (\d{4}-\d{2}-\d{2})/);
              if (!dateMatch) continue;

              const assignedDate = new Date(dateMatch[1]);
              const days = deadlineMap[priority] || 5;
              const dueDate = new Date(assignedDate);
              dueDate.setDate(dueDate.getDate() + days);

              const oneDayBefore = new Date(dueDate);
              oneDayBefore.setDate(dueDate.getDate() - 1);

              if (now.toDateString() === oneDayBefore.toDateString()) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `Reminder: Deadline is tomorrow! Please complete the issue.`
                });
              } else if (now > dueDate) {
                await github.rest.issues.removeAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  assignees: issue.assignees.map(a => a.login)
                });
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  name: 'Status: Assigned'
                }).catch(() => {});
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['up-for-grabs']
                });
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `Deadline exceeded. Reassigning issue to community.`
                });
              }
            }
